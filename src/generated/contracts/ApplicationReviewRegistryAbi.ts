/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ApplicationReviewRegistryAbiInterface extends utils.Interface {
  functions: {
    "applicationReg()": FunctionFragment;
    "assignReviewers(uint96,uint96,address,address[],bool[])": FunctionFragment;
    "fulfillPayment(uint96,uint96[],address,uint96[],address,uint256)": FunctionFragment;
    "grantFactory()": FunctionFragment;
    "grantReviewStates(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "markPaymentDone(uint96,uint96[],address,uint96[],address,uint256,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reviewCount()": FunctionFragment;
    "reviewPaymentsStatus(uint96)": FunctionFragment;
    "reviews(address,uint96)": FunctionFragment;
    "setApplicationReg(address)": FunctionFragment;
    "setGrantFactory(address)": FunctionFragment;
    "setRubrics(uint96,address,string)": FunctionFragment;
    "setWorkspaceReg(address)": FunctionFragment;
    "submitReview(uint96,uint96,address,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "workspaceReg()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "applicationReg"
      | "assignReviewers"
      | "fulfillPayment"
      | "grantFactory"
      | "grantReviewStates"
      | "initialize"
      | "markPaymentDone"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "reviewCount"
      | "reviewPaymentsStatus"
      | "reviews"
      | "setApplicationReg"
      | "setGrantFactory"
      | "setRubrics"
      | "setWorkspaceReg"
      | "submitReview"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "workspaceReg"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "applicationReg",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assignReviewers",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillPayment",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantReviewStates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markPaymentDone",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewPaymentsStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reviews",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApplicationReg",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGrantFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRubrics",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorkspaceReg",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitReview",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "workspaceReg",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "applicationReg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignReviewers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantReviewStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "markPaymentDone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewPaymentsStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reviews", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApplicationReg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGrantFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRubrics", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWorkspaceReg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workspaceReg",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReviewPaymentFulfilled(uint96[],address,address,address,uint256,uint256)": EventFragment;
    "ReviewPaymentMarkedDone(uint96[],address,address,uint256,string,uint256)": EventFragment;
    "ReviewSubmitted(uint96,uint96,uint96,address,string,uint256)": EventFragment;
    "ReviewersAssigned(uint96[],uint96,uint96,address,address[],bool[],uint256)": EventFragment;
    "RubricsSet(uint96,address,string,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReviewPaymentFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReviewPaymentMarkedDone"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReviewSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReviewersAssigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RubricsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReviewPaymentFulfilledEventObject {
  _reviewIds: BigNumber[];
  _asset: string;
  _sender: string;
  _reviewer: string;
  _amount: BigNumber;
  time: BigNumber;
}
export type ReviewPaymentFulfilledEvent = TypedEvent<
  [BigNumber[], string, string, string, BigNumber, BigNumber],
  ReviewPaymentFulfilledEventObject
>;

export type ReviewPaymentFulfilledEventFilter =
  TypedEventFilter<ReviewPaymentFulfilledEvent>;

export interface ReviewPaymentMarkedDoneEventObject {
  _reviewIds: BigNumber[];
  _asset: string;
  _reviewer: string;
  _amount: BigNumber;
  _transactionHash: string;
  time: BigNumber;
}
export type ReviewPaymentMarkedDoneEvent = TypedEvent<
  [BigNumber[], string, string, BigNumber, string, BigNumber],
  ReviewPaymentMarkedDoneEventObject
>;

export type ReviewPaymentMarkedDoneEventFilter =
  TypedEventFilter<ReviewPaymentMarkedDoneEvent>;

export interface ReviewSubmittedEventObject {
  _reviewId: BigNumber;
  _workspaceId: BigNumber;
  _applicationId: BigNumber;
  _grantAddress: string;
  _metadataHash: string;
  time: BigNumber;
}
export type ReviewSubmittedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string, BigNumber],
  ReviewSubmittedEventObject
>;

export type ReviewSubmittedEventFilter = TypedEventFilter<ReviewSubmittedEvent>;

export interface ReviewersAssignedEventObject {
  _reviewIds: BigNumber[];
  _workspaceId: BigNumber;
  _applicationId: BigNumber;
  _grantAddress: string;
  _reviewers: string[];
  _active: boolean[];
  time: BigNumber;
}
export type ReviewersAssignedEvent = TypedEvent<
  [BigNumber[], BigNumber, BigNumber, string, string[], boolean[], BigNumber],
  ReviewersAssignedEventObject
>;

export type ReviewersAssignedEventFilter =
  TypedEventFilter<ReviewersAssignedEvent>;

export interface RubricsSetEventObject {
  _workspaceId: BigNumber;
  _grantAddress: string;
  _metadataHash: string;
  time: BigNumber;
}
export type RubricsSetEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  RubricsSetEventObject
>;

export type RubricsSetEventFilter = TypedEventFilter<RubricsSetEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ApplicationReviewRegistryAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ApplicationReviewRegistryAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    applicationReg(overrides?: CallOverrides): Promise<[string]>;

    assignReviewers(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _applicationId: PromiseOrValue<BigNumberish>,
      _grantAddress: PromiseOrValue<string>,
      _reviewers: PromiseOrValue<string>[],
      _active: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fulfillPayment(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _applicationIds: PromiseOrValue<BigNumberish>[],
      _reviewer: PromiseOrValue<string>,
      _reviewIds: PromiseOrValue<BigNumberish>[],
      _erc20Interface: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantFactory(overrides?: CallOverrides): Promise<[string]>;

    grantReviewStates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        grant: string;
        workspaceId: BigNumber;
        numOfReviews: BigNumber;
        rubricsMetadataHash: string;
      }
    >;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    markPaymentDone(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _applicationIds: PromiseOrValue<BigNumberish>[],
      _reviewer: PromiseOrValue<string>,
      _reviewIds: PromiseOrValue<BigNumberish>[],
      _erc20Interface: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _transactionHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reviewCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    reviewPaymentsStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    reviews(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, string, boolean] & {
        id: BigNumber;
        workspaceId: BigNumber;
        applicationId: BigNumber;
        grant: string;
        reviewer: string;
        metadataHash: string;
        active: boolean;
      }
    >;

    setApplicationReg(
      _applicationReg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGrantFactory(
      _grantFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRubrics(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _grantAddress: PromiseOrValue<string>,
      _metadataHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWorkspaceReg(
      _workspaceReg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitReview(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _applicationId: PromiseOrValue<BigNumberish>,
      _grantAddress: PromiseOrValue<string>,
      _metadataHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    workspaceReg(overrides?: CallOverrides): Promise<[string]>;
  };

  applicationReg(overrides?: CallOverrides): Promise<string>;

  assignReviewers(
    _workspaceId: PromiseOrValue<BigNumberish>,
    _applicationId: PromiseOrValue<BigNumberish>,
    _grantAddress: PromiseOrValue<string>,
    _reviewers: PromiseOrValue<string>[],
    _active: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fulfillPayment(
    _workspaceId: PromiseOrValue<BigNumberish>,
    _applicationIds: PromiseOrValue<BigNumberish>[],
    _reviewer: PromiseOrValue<string>,
    _reviewIds: PromiseOrValue<BigNumberish>[],
    _erc20Interface: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantFactory(overrides?: CallOverrides): Promise<string>;

  grantReviewStates(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string] & {
      grant: string;
      workspaceId: BigNumber;
      numOfReviews: BigNumber;
      rubricsMetadataHash: string;
    }
  >;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  markPaymentDone(
    _workspaceId: PromiseOrValue<BigNumberish>,
    _applicationIds: PromiseOrValue<BigNumberish>[],
    _reviewer: PromiseOrValue<string>,
    _reviewIds: PromiseOrValue<BigNumberish>[],
    _erc20Interface: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _transactionHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reviewCount(overrides?: CallOverrides): Promise<BigNumber>;

  reviewPaymentsStatus(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  reviews(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, string, string, boolean] & {
      id: BigNumber;
      workspaceId: BigNumber;
      applicationId: BigNumber;
      grant: string;
      reviewer: string;
      metadataHash: string;
      active: boolean;
    }
  >;

  setApplicationReg(
    _applicationReg: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGrantFactory(
    _grantFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRubrics(
    _workspaceId: PromiseOrValue<BigNumberish>,
    _grantAddress: PromiseOrValue<string>,
    _metadataHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWorkspaceReg(
    _workspaceReg: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitReview(
    _workspaceId: PromiseOrValue<BigNumberish>,
    _applicationId: PromiseOrValue<BigNumberish>,
    _grantAddress: PromiseOrValue<string>,
    _metadataHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  workspaceReg(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    applicationReg(overrides?: CallOverrides): Promise<string>;

    assignReviewers(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _applicationId: PromiseOrValue<BigNumberish>,
      _grantAddress: PromiseOrValue<string>,
      _reviewers: PromiseOrValue<string>[],
      _active: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillPayment(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _applicationIds: PromiseOrValue<BigNumberish>[],
      _reviewer: PromiseOrValue<string>,
      _reviewIds: PromiseOrValue<BigNumberish>[],
      _erc20Interface: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantFactory(overrides?: CallOverrides): Promise<string>;

    grantReviewStates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        grant: string;
        workspaceId: BigNumber;
        numOfReviews: BigNumber;
        rubricsMetadataHash: string;
      }
    >;

    initialize(overrides?: CallOverrides): Promise<void>;

    markPaymentDone(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _applicationIds: PromiseOrValue<BigNumberish>[],
      _reviewer: PromiseOrValue<string>,
      _reviewIds: PromiseOrValue<BigNumberish>[],
      _erc20Interface: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _transactionHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reviewCount(overrides?: CallOverrides): Promise<BigNumber>;

    reviewPaymentsStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    reviews(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, string, boolean] & {
        id: BigNumber;
        workspaceId: BigNumber;
        applicationId: BigNumber;
        grant: string;
        reviewer: string;
        metadataHash: string;
        active: boolean;
      }
    >;

    setApplicationReg(
      _applicationReg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGrantFactory(
      _grantFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRubrics(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _grantAddress: PromiseOrValue<string>,
      _metadataHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWorkspaceReg(
      _workspaceReg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitReview(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _applicationId: PromiseOrValue<BigNumberish>,
      _grantAddress: PromiseOrValue<string>,
      _metadataHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    workspaceReg(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ReviewPaymentFulfilled(uint96[],address,address,address,uint256,uint256)"(
      _reviewIds?: null,
      _asset?: null,
      _sender?: null,
      _reviewer?: null,
      _amount?: null,
      time?: null
    ): ReviewPaymentFulfilledEventFilter;
    ReviewPaymentFulfilled(
      _reviewIds?: null,
      _asset?: null,
      _sender?: null,
      _reviewer?: null,
      _amount?: null,
      time?: null
    ): ReviewPaymentFulfilledEventFilter;

    "ReviewPaymentMarkedDone(uint96[],address,address,uint256,string,uint256)"(
      _reviewIds?: null,
      _asset?: null,
      _reviewer?: null,
      _amount?: null,
      _transactionHash?: null,
      time?: null
    ): ReviewPaymentMarkedDoneEventFilter;
    ReviewPaymentMarkedDone(
      _reviewIds?: null,
      _asset?: null,
      _reviewer?: null,
      _amount?: null,
      _transactionHash?: null,
      time?: null
    ): ReviewPaymentMarkedDoneEventFilter;

    "ReviewSubmitted(uint96,uint96,uint96,address,string,uint256)"(
      _reviewId?: PromiseOrValue<BigNumberish> | null,
      _workspaceId?: null,
      _applicationId?: null,
      _grantAddress?: null,
      _metadataHash?: null,
      time?: null
    ): ReviewSubmittedEventFilter;
    ReviewSubmitted(
      _reviewId?: PromiseOrValue<BigNumberish> | null,
      _workspaceId?: null,
      _applicationId?: null,
      _grantAddress?: null,
      _metadataHash?: null,
      time?: null
    ): ReviewSubmittedEventFilter;

    "ReviewersAssigned(uint96[],uint96,uint96,address,address[],bool[],uint256)"(
      _reviewIds?: PromiseOrValue<BigNumberish>[] | null,
      _workspaceId?: null,
      _applicationId?: null,
      _grantAddress?: null,
      _reviewers?: null,
      _active?: null,
      time?: null
    ): ReviewersAssignedEventFilter;
    ReviewersAssigned(
      _reviewIds?: PromiseOrValue<BigNumberish>[] | null,
      _workspaceId?: null,
      _applicationId?: null,
      _grantAddress?: null,
      _reviewers?: null,
      _active?: null,
      time?: null
    ): ReviewersAssignedEventFilter;

    "RubricsSet(uint96,address,string,uint256)"(
      _workspaceId?: null,
      _grantAddress?: PromiseOrValue<string> | null,
      _metadataHash?: null,
      time?: null
    ): RubricsSetEventFilter;
    RubricsSet(
      _workspaceId?: null,
      _grantAddress?: PromiseOrValue<string> | null,
      _metadataHash?: null,
      time?: null
    ): RubricsSetEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    applicationReg(overrides?: CallOverrides): Promise<BigNumber>;

    assignReviewers(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _applicationId: PromiseOrValue<BigNumberish>,
      _grantAddress: PromiseOrValue<string>,
      _reviewers: PromiseOrValue<string>[],
      _active: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fulfillPayment(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _applicationIds: PromiseOrValue<BigNumberish>[],
      _reviewer: PromiseOrValue<string>,
      _reviewIds: PromiseOrValue<BigNumberish>[],
      _erc20Interface: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantFactory(overrides?: CallOverrides): Promise<BigNumber>;

    grantReviewStates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    markPaymentDone(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _applicationIds: PromiseOrValue<BigNumberish>[],
      _reviewer: PromiseOrValue<string>,
      _reviewIds: PromiseOrValue<BigNumberish>[],
      _erc20Interface: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _transactionHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reviewCount(overrides?: CallOverrides): Promise<BigNumber>;

    reviewPaymentsStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reviews(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApplicationReg(
      _applicationReg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGrantFactory(
      _grantFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRubrics(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _grantAddress: PromiseOrValue<string>,
      _metadataHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWorkspaceReg(
      _workspaceReg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitReview(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _applicationId: PromiseOrValue<BigNumberish>,
      _grantAddress: PromiseOrValue<string>,
      _metadataHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    workspaceReg(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    applicationReg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assignReviewers(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _applicationId: PromiseOrValue<BigNumberish>,
      _grantAddress: PromiseOrValue<string>,
      _reviewers: PromiseOrValue<string>[],
      _active: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fulfillPayment(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _applicationIds: PromiseOrValue<BigNumberish>[],
      _reviewer: PromiseOrValue<string>,
      _reviewIds: PromiseOrValue<BigNumberish>[],
      _erc20Interface: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantReviewStates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    markPaymentDone(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _applicationIds: PromiseOrValue<BigNumberish>[],
      _reviewer: PromiseOrValue<string>,
      _reviewIds: PromiseOrValue<BigNumberish>[],
      _erc20Interface: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _transactionHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reviewCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reviewPaymentsStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reviews(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApplicationReg(
      _applicationReg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGrantFactory(
      _grantFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRubrics(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _grantAddress: PromiseOrValue<string>,
      _metadataHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWorkspaceReg(
      _workspaceReg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitReview(
      _workspaceId: PromiseOrValue<BigNumberish>,
      _applicationId: PromiseOrValue<BigNumberish>,
      _grantAddress: PromiseOrValue<string>,
      _metadataHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    workspaceReg(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

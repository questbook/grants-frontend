/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace WorkspaceRegistry {
  export type SafeStruct = {
    _address: PromiseOrValue<BytesLike>;
    chainId: PromiseOrValue<BigNumberish>;
  };

  export type SafeStructOutput = [string, BigNumber] & {
    _address: string;
    chainId: BigNumber;
  };
}

export interface WorkspaceRegistryAbiInterface extends utils.Interface {
  functions: {
    "anonAuthoriserAddress()": FunctionFragment;
    "apiFlagForWorkspaceId(uint96,uint8)": FunctionFragment;
    "applicationReg()": FunctionFragment;
    "createInviteLink(uint96,uint8,address)": FunctionFragment;
    "createWorkspace(string,bytes32,string,uint256)": FunctionFragment;
    "disburseRewardFromSafe(uint96[],uint96[],address,uint256[],uint96)": FunctionFragment;
    "disburseRewardP2P(uint96,address,uint96,address,uint256,uint96)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isWorkspaceAdmin(uint96,address)": FunctionFragment;
    "isWorkspaceAdminOrReviewer(uint96,address)": FunctionFragment;
    "joinViaInviteLink(uint96,string,uint8,uint8,bytes32,bytes32)": FunctionFragment;
    "memberRoles(uint96,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateAnonAuthoriserAddress(address)": FunctionFragment;
    "updateWorkspaceMembers(uint96,address[],uint8[],bool[],string[])": FunctionFragment;
    "updateWorkspaceMetadata(uint96,string)": FunctionFragment;
    "updateWorkspaceSafe(uint96,bytes32,string,uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "workspaceCount()": FunctionFragment;
    "workspaces(uint96)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "anonAuthoriserAddress"
      | "apiFlagForWorkspaceId"
      | "applicationReg"
      | "createInviteLink"
      | "createWorkspace"
      | "disburseRewardFromSafe"
      | "disburseRewardP2P"
      | "initialize"
      | "isWorkspaceAdmin"
      | "isWorkspaceAdminOrReviewer"
      | "joinViaInviteLink"
      | "memberRoles"
      | "owner"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "renounceOwnership"
      | "transferOwnership"
      | "unpause"
      | "updateAnonAuthoriserAddress"
      | "updateWorkspaceMembers"
      | "updateWorkspaceMetadata"
      | "updateWorkspaceSafe"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "workspaceCount"
      | "workspaces"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "anonAuthoriserAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "apiFlagForWorkspaceId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "applicationReg",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createInviteLink",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createWorkspace",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disburseRewardFromSafe",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disburseRewardP2P",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWorkspaceAdmin",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWorkspaceAdminOrReviewer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinViaInviteLink",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "memberRoles",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAnonAuthoriserAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWorkspaceMembers",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<boolean>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWorkspaceMetadata",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWorkspaceSafe",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "workspaceCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "workspaces",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "anonAuthoriserAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "apiFlagForWorkspaceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applicationReg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createInviteLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWorkspace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disburseRewardFromSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disburseRewardP2P",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWorkspaceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWorkspaceAdminOrReviewer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinViaInviteLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAnonAuthoriserAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWorkspaceMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWorkspaceMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWorkspaceSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workspaceCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workspaces", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "DisburseReward(uint96,uint96,address,address,uint256,bool,uint256)": EventFragment;
    "DisburseRewardFromSafe(uint96,uint96,address,address,uint256,bool,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "WorkspaceCreated(uint96,address,string,uint256)": EventFragment;
    "WorkspaceMemberUpdated(uint96,address,uint8,bool,string,uint256)": EventFragment;
    "WorkspaceMembersUpdated(uint96,address[],uint8[],bool[],string[],uint256)": EventFragment;
    "WorkspaceSafeUpdated(uint96,bytes32,string,uint256,uint256)": EventFragment;
    "WorkspaceUpdated(uint96,address,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisburseReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisburseRewardFromSafe"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WorkspaceCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WorkspaceMemberUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WorkspaceMembersUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WorkspaceSafeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WorkspaceUpdated"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DisburseRewardEventObject {
  applicationId: BigNumber;
  milestoneId: BigNumber;
  asset: string;
  sender: string;
  amount: BigNumber;
  isP2P: boolean;
  time: BigNumber;
}
export type DisburseRewardEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber, boolean, BigNumber],
  DisburseRewardEventObject
>;

export type DisburseRewardEventFilter = TypedEventFilter<DisburseRewardEvent>;

export interface DisburseRewardFromSafeEventObject {
  applicationId: BigNumber;
  milestoneId: BigNumber;
  asset: string;
  sender: string;
  amount: BigNumber;
  isP2P: boolean;
  time: BigNumber;
}
export type DisburseRewardFromSafeEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber, boolean, BigNumber],
  DisburseRewardFromSafeEventObject
>;

export type DisburseRewardFromSafeEventFilter =
  TypedEventFilter<DisburseRewardFromSafeEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WorkspaceCreatedEventObject {
  id: BigNumber;
  owner: string;
  metadataHash: string;
  time: BigNumber;
}
export type WorkspaceCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  WorkspaceCreatedEventObject
>;

export type WorkspaceCreatedEventFilter =
  TypedEventFilter<WorkspaceCreatedEvent>;

export interface WorkspaceMemberUpdatedEventObject {
  id: BigNumber;
  member: string;
  role: number;
  enabled: boolean;
  metadataHash: string;
  time: BigNumber;
}
export type WorkspaceMemberUpdatedEvent = TypedEvent<
  [BigNumber, string, number, boolean, string, BigNumber],
  WorkspaceMemberUpdatedEventObject
>;

export type WorkspaceMemberUpdatedEventFilter =
  TypedEventFilter<WorkspaceMemberUpdatedEvent>;

export interface WorkspaceMembersUpdatedEventObject {
  id: BigNumber;
  members: string[];
  roles: number[];
  enabled: boolean[];
  emails: string[];
  time: BigNumber;
}
export type WorkspaceMembersUpdatedEvent = TypedEvent<
  [BigNumber, string[], number[], boolean[], string[], BigNumber],
  WorkspaceMembersUpdatedEventObject
>;

export type WorkspaceMembersUpdatedEventFilter =
  TypedEventFilter<WorkspaceMembersUpdatedEvent>;

export interface WorkspaceSafeUpdatedEventObject {
  id: BigNumber;
  safeAddress: string;
  longSafeAddress: string;
  safeChainId: BigNumber;
  time: BigNumber;
}
export type WorkspaceSafeUpdatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  WorkspaceSafeUpdatedEventObject
>;

export type WorkspaceSafeUpdatedEventFilter =
  TypedEventFilter<WorkspaceSafeUpdatedEvent>;

export interface WorkspaceUpdatedEventObject {
  id: BigNumber;
  owner: string;
  metadataHash: string;
  time: BigNumber;
}
export type WorkspaceUpdatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  WorkspaceUpdatedEventObject
>;

export type WorkspaceUpdatedEventFilter =
  TypedEventFilter<WorkspaceUpdatedEvent>;

export interface WorkspaceRegistryAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WorkspaceRegistryAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    anonAuthoriserAddress(overrides?: CallOverrides): Promise<[string]>;

    apiFlagForWorkspaceId(
      workspaceId: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    applicationReg(overrides?: CallOverrides): Promise<[string]>;

    createInviteLink(
      _id: PromiseOrValue<BigNumberish>,
      _role: PromiseOrValue<BigNumberish>,
      publicKeyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createWorkspace(
      _metadataHash: PromiseOrValue<string>,
      _safeAddress: PromiseOrValue<BytesLike>,
      _longSafeAddress: PromiseOrValue<string>,
      _safeChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disburseRewardFromSafe(
      _applicationIds: PromiseOrValue<BigNumberish>[],
      _milestoneIds: PromiseOrValue<BigNumberish>[],
      _erc20Interface: PromiseOrValue<string>,
      _amounts: PromiseOrValue<BigNumberish>[],
      _workspaceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disburseRewardP2P(
      _applicationId: PromiseOrValue<BigNumberish>,
      _applicantWalletAddress: PromiseOrValue<string>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      _erc20Interface: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _workspaceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isWorkspaceAdmin(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWorkspaceAdminOrReviewer(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joinViaInviteLink(
      _id: PromiseOrValue<BigNumberish>,
      _metadataHash: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      signatureV: PromiseOrValue<BigNumberish>,
      signatureR: PromiseOrValue<BytesLike>,
      signatureS: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    memberRoles(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAnonAuthoriserAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWorkspaceMembers(
      _id: PromiseOrValue<BigNumberish>,
      _members: PromiseOrValue<string>[],
      _roles: PromiseOrValue<BigNumberish>[],
      _enabled: PromiseOrValue<boolean>[],
      _emails: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWorkspaceMetadata(
      _id: PromiseOrValue<BigNumberish>,
      _metadataHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWorkspaceSafe(
      _id: PromiseOrValue<BigNumberish>,
      _safeAddress: PromiseOrValue<BytesLike>,
      _longSafeAddress: PromiseOrValue<string>,
      _safeChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    workspaceCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    workspaces(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, WorkspaceRegistry.SafeStructOutput] & {
        id: BigNumber;
        owner: string;
        metadataHash: string;
        safe: WorkspaceRegistry.SafeStructOutput;
      }
    >;
  };

  anonAuthoriserAddress(overrides?: CallOverrides): Promise<string>;

  apiFlagForWorkspaceId(
    workspaceId: PromiseOrValue<BigNumberish>,
    role: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  applicationReg(overrides?: CallOverrides): Promise<string>;

  createInviteLink(
    _id: PromiseOrValue<BigNumberish>,
    _role: PromiseOrValue<BigNumberish>,
    publicKeyAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createWorkspace(
    _metadataHash: PromiseOrValue<string>,
    _safeAddress: PromiseOrValue<BytesLike>,
    _longSafeAddress: PromiseOrValue<string>,
    _safeChainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disburseRewardFromSafe(
    _applicationIds: PromiseOrValue<BigNumberish>[],
    _milestoneIds: PromiseOrValue<BigNumberish>[],
    _erc20Interface: PromiseOrValue<string>,
    _amounts: PromiseOrValue<BigNumberish>[],
    _workspaceId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disburseRewardP2P(
    _applicationId: PromiseOrValue<BigNumberish>,
    _applicantWalletAddress: PromiseOrValue<string>,
    _milestoneId: PromiseOrValue<BigNumberish>,
    _erc20Interface: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _workspaceId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isWorkspaceAdmin(
    _id: PromiseOrValue<BigNumberish>,
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWorkspaceAdminOrReviewer(
    _id: PromiseOrValue<BigNumberish>,
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joinViaInviteLink(
    _id: PromiseOrValue<BigNumberish>,
    _metadataHash: PromiseOrValue<string>,
    _role: PromiseOrValue<BigNumberish>,
    signatureV: PromiseOrValue<BigNumberish>,
    signatureR: PromiseOrValue<BytesLike>,
    signatureS: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  memberRoles(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAnonAuthoriserAddress(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWorkspaceMembers(
    _id: PromiseOrValue<BigNumberish>,
    _members: PromiseOrValue<string>[],
    _roles: PromiseOrValue<BigNumberish>[],
    _enabled: PromiseOrValue<boolean>[],
    _emails: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWorkspaceMetadata(
    _id: PromiseOrValue<BigNumberish>,
    _metadataHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWorkspaceSafe(
    _id: PromiseOrValue<BigNumberish>,
    _safeAddress: PromiseOrValue<BytesLike>,
    _longSafeAddress: PromiseOrValue<string>,
    _safeChainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  workspaceCount(overrides?: CallOverrides): Promise<BigNumber>;

  workspaces(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, WorkspaceRegistry.SafeStructOutput] & {
      id: BigNumber;
      owner: string;
      metadataHash: string;
      safe: WorkspaceRegistry.SafeStructOutput;
    }
  >;

  callStatic: {
    anonAuthoriserAddress(overrides?: CallOverrides): Promise<string>;

    apiFlagForWorkspaceId(
      workspaceId: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    applicationReg(overrides?: CallOverrides): Promise<string>;

    createInviteLink(
      _id: PromiseOrValue<BigNumberish>,
      _role: PromiseOrValue<BigNumberish>,
      publicKeyAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createWorkspace(
      _metadataHash: PromiseOrValue<string>,
      _safeAddress: PromiseOrValue<BytesLike>,
      _longSafeAddress: PromiseOrValue<string>,
      _safeChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    disburseRewardFromSafe(
      _applicationIds: PromiseOrValue<BigNumberish>[],
      _milestoneIds: PromiseOrValue<BigNumberish>[],
      _erc20Interface: PromiseOrValue<string>,
      _amounts: PromiseOrValue<BigNumberish>[],
      _workspaceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    disburseRewardP2P(
      _applicationId: PromiseOrValue<BigNumberish>,
      _applicantWalletAddress: PromiseOrValue<string>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      _erc20Interface: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _workspaceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isWorkspaceAdmin(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWorkspaceAdminOrReviewer(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinViaInviteLink(
      _id: PromiseOrValue<BigNumberish>,
      _metadataHash: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      signatureV: PromiseOrValue<BigNumberish>,
      signatureR: PromiseOrValue<BytesLike>,
      signatureS: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    memberRoles(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateAnonAuthoriserAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWorkspaceMembers(
      _id: PromiseOrValue<BigNumberish>,
      _members: PromiseOrValue<string>[],
      _roles: PromiseOrValue<BigNumberish>[],
      _enabled: PromiseOrValue<boolean>[],
      _emails: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateWorkspaceMetadata(
      _id: PromiseOrValue<BigNumberish>,
      _metadataHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWorkspaceSafe(
      _id: PromiseOrValue<BigNumberish>,
      _safeAddress: PromiseOrValue<BytesLike>,
      _longSafeAddress: PromiseOrValue<string>,
      _safeChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    workspaceCount(overrides?: CallOverrides): Promise<BigNumber>;

    workspaces(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, WorkspaceRegistry.SafeStructOutput] & {
        id: BigNumber;
        owner: string;
        metadataHash: string;
        safe: WorkspaceRegistry.SafeStructOutput;
      }
    >;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "DisburseReward(uint96,uint96,address,address,uint256,bool,uint256)"(
      applicationId?: PromiseOrValue<BigNumberish> | null,
      milestoneId?: null,
      asset?: null,
      sender?: null,
      amount?: null,
      isP2P?: null,
      time?: null
    ): DisburseRewardEventFilter;
    DisburseReward(
      applicationId?: PromiseOrValue<BigNumberish> | null,
      milestoneId?: null,
      asset?: null,
      sender?: null,
      amount?: null,
      isP2P?: null,
      time?: null
    ): DisburseRewardEventFilter;

    "DisburseRewardFromSafe(uint96,uint96,address,address,uint256,bool,uint256)"(
      applicationId?: PromiseOrValue<BigNumberish> | null,
      milestoneId?: null,
      asset?: null,
      sender?: null,
      amount?: null,
      isP2P?: null,
      time?: null
    ): DisburseRewardFromSafeEventFilter;
    DisburseRewardFromSafe(
      applicationId?: PromiseOrValue<BigNumberish> | null,
      milestoneId?: null,
      asset?: null,
      sender?: null,
      amount?: null,
      isP2P?: null,
      time?: null
    ): DisburseRewardFromSafeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "WorkspaceCreated(uint96,address,string,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      metadataHash?: null,
      time?: null
    ): WorkspaceCreatedEventFilter;
    WorkspaceCreated(
      id?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      metadataHash?: null,
      time?: null
    ): WorkspaceCreatedEventFilter;

    "WorkspaceMemberUpdated(uint96,address,uint8,bool,string,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      member?: null,
      role?: null,
      enabled?: null,
      metadataHash?: null,
      time?: null
    ): WorkspaceMemberUpdatedEventFilter;
    WorkspaceMemberUpdated(
      id?: PromiseOrValue<BigNumberish> | null,
      member?: null,
      role?: null,
      enabled?: null,
      metadataHash?: null,
      time?: null
    ): WorkspaceMemberUpdatedEventFilter;

    "WorkspaceMembersUpdated(uint96,address[],uint8[],bool[],string[],uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      members?: null,
      roles?: null,
      enabled?: null,
      emails?: null,
      time?: null
    ): WorkspaceMembersUpdatedEventFilter;
    WorkspaceMembersUpdated(
      id?: PromiseOrValue<BigNumberish> | null,
      members?: null,
      roles?: null,
      enabled?: null,
      emails?: null,
      time?: null
    ): WorkspaceMembersUpdatedEventFilter;

    "WorkspaceSafeUpdated(uint96,bytes32,string,uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      safeAddress?: null,
      longSafeAddress?: null,
      safeChainId?: null,
      time?: null
    ): WorkspaceSafeUpdatedEventFilter;
    WorkspaceSafeUpdated(
      id?: PromiseOrValue<BigNumberish> | null,
      safeAddress?: null,
      longSafeAddress?: null,
      safeChainId?: null,
      time?: null
    ): WorkspaceSafeUpdatedEventFilter;

    "WorkspaceUpdated(uint96,address,string,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      metadataHash?: null,
      time?: null
    ): WorkspaceUpdatedEventFilter;
    WorkspaceUpdated(
      id?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      metadataHash?: null,
      time?: null
    ): WorkspaceUpdatedEventFilter;
  };

  estimateGas: {
    anonAuthoriserAddress(overrides?: CallOverrides): Promise<BigNumber>;

    apiFlagForWorkspaceId(
      workspaceId: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applicationReg(overrides?: CallOverrides): Promise<BigNumber>;

    createInviteLink(
      _id: PromiseOrValue<BigNumberish>,
      _role: PromiseOrValue<BigNumberish>,
      publicKeyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createWorkspace(
      _metadataHash: PromiseOrValue<string>,
      _safeAddress: PromiseOrValue<BytesLike>,
      _longSafeAddress: PromiseOrValue<string>,
      _safeChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disburseRewardFromSafe(
      _applicationIds: PromiseOrValue<BigNumberish>[],
      _milestoneIds: PromiseOrValue<BigNumberish>[],
      _erc20Interface: PromiseOrValue<string>,
      _amounts: PromiseOrValue<BigNumberish>[],
      _workspaceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disburseRewardP2P(
      _applicationId: PromiseOrValue<BigNumberish>,
      _applicantWalletAddress: PromiseOrValue<string>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      _erc20Interface: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _workspaceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isWorkspaceAdmin(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWorkspaceAdminOrReviewer(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinViaInviteLink(
      _id: PromiseOrValue<BigNumberish>,
      _metadataHash: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      signatureV: PromiseOrValue<BigNumberish>,
      signatureR: PromiseOrValue<BytesLike>,
      signatureS: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    memberRoles(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAnonAuthoriserAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWorkspaceMembers(
      _id: PromiseOrValue<BigNumberish>,
      _members: PromiseOrValue<string>[],
      _roles: PromiseOrValue<BigNumberish>[],
      _enabled: PromiseOrValue<boolean>[],
      _emails: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWorkspaceMetadata(
      _id: PromiseOrValue<BigNumberish>,
      _metadataHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWorkspaceSafe(
      _id: PromiseOrValue<BigNumberish>,
      _safeAddress: PromiseOrValue<BytesLike>,
      _longSafeAddress: PromiseOrValue<string>,
      _safeChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    workspaceCount(overrides?: CallOverrides): Promise<BigNumber>;

    workspaces(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    anonAuthoriserAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    apiFlagForWorkspaceId(
      workspaceId: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applicationReg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createInviteLink(
      _id: PromiseOrValue<BigNumberish>,
      _role: PromiseOrValue<BigNumberish>,
      publicKeyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createWorkspace(
      _metadataHash: PromiseOrValue<string>,
      _safeAddress: PromiseOrValue<BytesLike>,
      _longSafeAddress: PromiseOrValue<string>,
      _safeChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disburseRewardFromSafe(
      _applicationIds: PromiseOrValue<BigNumberish>[],
      _milestoneIds: PromiseOrValue<BigNumberish>[],
      _erc20Interface: PromiseOrValue<string>,
      _amounts: PromiseOrValue<BigNumberish>[],
      _workspaceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disburseRewardP2P(
      _applicationId: PromiseOrValue<BigNumberish>,
      _applicantWalletAddress: PromiseOrValue<string>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      _erc20Interface: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _workspaceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isWorkspaceAdmin(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWorkspaceAdminOrReviewer(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinViaInviteLink(
      _id: PromiseOrValue<BigNumberish>,
      _metadataHash: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      signatureV: PromiseOrValue<BigNumberish>,
      signatureR: PromiseOrValue<BytesLike>,
      signatureS: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    memberRoles(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAnonAuthoriserAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWorkspaceMembers(
      _id: PromiseOrValue<BigNumberish>,
      _members: PromiseOrValue<string>[],
      _roles: PromiseOrValue<BigNumberish>[],
      _enabled: PromiseOrValue<boolean>[],
      _emails: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWorkspaceMetadata(
      _id: PromiseOrValue<BigNumberish>,
      _metadataHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWorkspaceSafe(
      _id: PromiseOrValue<BigNumberish>,
      _safeAddress: PromiseOrValue<BytesLike>,
      _longSafeAddress: PromiseOrValue<string>,
      _safeChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    workspaceCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    workspaces(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
